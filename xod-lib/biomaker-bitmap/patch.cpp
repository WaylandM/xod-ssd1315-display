
static const unsigned char icon[] PROGMEM = {

0b11111000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000011,
0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00111111,
0b11111111, 0b11100000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b11111111, 0b11000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b11111111,
0b11111111, 0b11110000, 0b00000000, 0b00000000, 0b00000000, 0b00001111, 0b11111111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, 0b00000111, 0b11111111,
0b11111111, 0b11111100, 0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, 0b00001111, 0b11111111,
0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b10000000, 0b00000000, 0b00000000, 0b00011111, 0b11111111,
0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000001, 0b11111111, 0b11111111, 0b11111111, 0b11000000, 0b00000000, 0b00000000, 0b00111111, 0b11111111,
0b11111111, 0b11111111, 0b10000000, 0b00000000, 0b00000011, 0b11111111, 0b11111111, 0b11111111, 0b11100000, 0b00000000, 0b00000000, 0b01111111, 0b11111111,
0b00011111, 0b11111111, 0b11000000, 0b00000000, 0b00000111, 0b11111111, 0b11111111, 0b11111111, 0b11110000, 0b00000000, 0b00000000, 0b11111111, 0b11111111,
0b00000111, 0b11111111, 0b11100000, 0b00000000, 0b00001111, 0b11111111, 0b11111111, 0b11111111, 0b11111000, 0b00000000, 0b00000001, 0b11111111, 0b11110000,
0b00000111, 0b11111111, 0b11110000, 0b00000000, 0b00011111, 0b11111111, 0b11111111, 0b11111111, 0b11111100, 0b00000000, 0b00000011, 0b11111111, 0b11110000,
0b00000111, 0b11111111, 0b11110000, 0b00000000, 0b00111111, 0b11111110, 0b00111111, 0b00011111, 0b11111110, 0b00000000, 0b00000111, 0b11111111, 0b11110000,
0b00000111, 0b11111111, 0b11111000, 0b00000000, 0b00111111, 0b11111000, 0b00111111, 0b00001111, 0b11111111, 0b00000000, 0b00000111, 0b11111111, 0b11110000,
0b00000111, 0b11011111, 0b11111100, 0b00000000, 0b01111111, 0b11110000, 0b00111111, 0b00000011, 0b11111111, 0b10000000, 0b00001111, 0b11111111, 0b11110000,
0b00000111, 0b11001111, 0b11111100, 0b00000000, 0b11111111, 0b11100000, 0b00111111, 0b00000011, 0b11111111, 0b10000000, 0b00011111, 0b11111011, 0b11110000,
0b00000111, 0b11000111, 0b11111110, 0b00000001, 0b11111111, 0b11100000, 0b00111111, 0b00000011, 0b11111111, 0b11000000, 0b00011111, 0b11110011, 0b11110000,
0b00000111, 0b11000011, 0b11111111, 0b00000001, 0b11111111, 0b11100000, 0b00111111, 0b00000011, 0b11111111, 0b11100000, 0b00111111, 0b11110011, 0b11110000,
0b00000111, 0b11000001, 0b11111111, 0b00000011, 0b11111111, 0b11100000, 0b00111111, 0b00000011, 0b11111111, 0b11100000, 0b01111111, 0b11100011, 0b11110000,
0b00011111, 0b11100001, 0b11111111, 0b10000111, 0b11111111, 0b11100000, 0b00111111, 0b00000011, 0b11111111, 0b11110000, 0b01111111, 0b11000011, 0b11110000,
0b00111111, 0b11110000, 0b11111111, 0b10000111, 0b11111111, 0b11100000, 0b00111111, 0b00000011, 0b11111111, 0b11111000, 0b11111111, 0b11000011, 0b11110000,
0b01111111, 0b11111000, 0b11111111, 0b10001111, 0b11111111, 0b11100000, 0b00111111, 0b00000011, 0b11111111, 0b11111000, 0b01111111, 0b10000011, 0b11110000,
0b11111111, 0b11111100, 0b01111111, 0b10001111, 0b11111111, 0b11100000, 0b00111111, 0b00000011, 0b11111111, 0b11111100, 0b01111111, 0b00000111, 0b11111000,
0b11111111, 0b11111100, 0b00111111, 0b00011111, 0b11111111, 0b11100000, 0b00111111, 0b00000011, 0b11110111, 0b11111100, 0b00111111, 0b00001111, 0b11111110,
0b11111100, 0b11111100, 0b00111111, 0b00011111, 0b11110111, 0b11100000, 0b00111111, 0b00000011, 0b11110011, 0b11111110, 0b00111110, 0b00011111, 0b11111111,
0b11111000, 0b01111110, 0b00011111, 0b00111111, 0b11100111, 0b11100000, 0b00111111, 0b00000011, 0b11110011, 0b11111110, 0b00111110, 0b00111111, 0b11111111,
0b11111000, 0b01111110, 0b00011110, 0b00111111, 0b11100111, 0b11100000, 0b00111111, 0b00000011, 0b11110001, 0b11111111, 0b00011100, 0b00111111, 0b11111111,
0b11111000, 0b01111110, 0b00001110, 0b01111111, 0b11000111, 0b11100000, 0b00111111, 0b00000011, 0b11110001, 0b11111111, 0b00011100, 0b00111111, 0b00011111,
0b11111100, 0b11111100, 0b00001100, 0b01111111, 0b11000111, 0b11100000, 0b00111111, 0b00000011, 0b11110000, 0b11111111, 0b10001000, 0b00111110, 0b00001111,
0b11111111, 0b11111100, 0b00000100, 0b11111111, 0b10000111, 0b11100000, 0b00111111, 0b00000011, 0b11110000, 0b11111111, 0b10000000, 0b00111110, 0b00001111,
0b11111111, 0b11111100, 0b00000000, 0b11111111, 0b10000111, 0b11100000, 0b00111111, 0b00000011, 0b11110000, 0b01111111, 0b11000000, 0b00111111, 0b00011111,
0b01111111, 0b11111000, 0b00000001, 0b11111111, 0b00000111, 0b11100000, 0b00111111, 0b00000011, 0b11110000, 0b01111111, 0b11000000, 0b00111111, 0b11111111,
0b00111111, 0b11110000, 0b00000001, 0b11111111, 0b00000111, 0b11100000, 0b00111111, 0b00000011, 0b11110000, 0b00111111, 0b11100000, 0b00111111, 0b11111111,
0b00011111, 0b11100000, 0b00000011, 0b11111110, 0b00000111, 0b11100000, 0b00111111, 0b00000011, 0b11110000, 0b00111111, 0b11100000, 0b00011111, 0b11111111,
0b00000111, 0b11000000, 0b00000011, 0b11111110, 0b00000111, 0b11100000, 0b11111111, 0b10000011, 0b11110000, 0b00011111, 0b11110000, 0b00001111, 0b11111110,
0b00000111, 0b11000000, 0b00000111, 0b11111100, 0b00000111, 0b11100001, 0b11111111, 0b11000011, 0b11110000, 0b00011111, 0b11110000, 0b00000111, 0b11111100,
0b00000111, 0b11000000, 0b00000111, 0b11111100, 0b00000111, 0b11100011, 0b11111111, 0b11100011, 0b11110000, 0b00001111, 0b11111000, 0b00000011, 0b11110000,
0b00000111, 0b11000000, 0b00001111, 0b11111000, 0b11000111, 0b11100011, 0b11111111, 0b11110011, 0b11110000, 0b10001111, 0b11111000, 0b00000011, 0b11110000,
0b00000111, 0b11000000, 0b00001111, 0b11111000, 0b11000111, 0b11100111, 0b11111111, 0b11110011, 0b11110001, 0b11000111, 0b11111100, 0b00000011, 0b11110000,
0b00000111, 0b11000000, 0b00011111, 0b11110001, 0b11100111, 0b11100111, 0b11100011, 0b11111011, 0b11110001, 0b11000111, 0b11111100, 0b00000011, 0b11110000,
0b00000111, 0b11000000, 0b00011111, 0b11110011, 0b11110111, 0b11100111, 0b11000001, 0b11111011, 0b11110011, 0b11100011, 0b11111110, 0b00000011, 0b11110000,
0b00000111, 0b11000000, 0b00111111, 0b11100011, 0b11110111, 0b11100111, 0b11000001, 0b11111011, 0b11110011, 0b11110011, 0b11111110, 0b00000011, 0b11110000,
0b00000111, 0b11000000, 0b00111111, 0b11100111, 0b11111111, 0b11100111, 0b11100011, 0b11111011, 0b11110111, 0b11110001, 0b11111111, 0b00000011, 0b11110000,
0b00000111, 0b11000000, 0b01111111, 0b11000111, 0b11111111, 0b11100111, 0b11111111, 0b11110011, 0b11111111, 0b11111001, 0b11111111, 0b00000011, 0b11110000,
0b00000111, 0b11000000, 0b11111111, 0b11001111, 0b11111111, 0b11100011, 0b11111111, 0b11110011, 0b11111111, 0b11111000, 0b11111111, 0b10000011, 0b11110000,
0b00000111, 0b11000000, 0b11111111, 0b10000111, 0b11111111, 0b11100011, 0b11111111, 0b11100011, 0b11111111, 0b11111000, 0b11111111, 0b11000011, 0b11110000,
0b00000111, 0b11000001, 0b11111111, 0b10000011, 0b11111111, 0b11100001, 0b11111111, 0b11000011, 0b11111111, 0b11110000, 0b01111111, 0b11000011, 0b11110000,
0b00000111, 0b11000011, 0b11111111, 0b00000011, 0b11111111, 0b11100000, 0b11111111, 0b10000011, 0b11111111, 0b11110000, 0b01111111, 0b11100011, 0b11110000,
0b00000111, 0b11000011, 0b11111111, 0b00000001, 0b11111111, 0b11100000, 0b00111111, 0b00000011, 0b11111111, 0b11100000, 0b00111111, 0b11110011, 0b11110000,
0b00000111, 0b11000111, 0b11111110, 0b00000001, 0b11111111, 0b11100000, 0b00111111, 0b00000011, 0b11111111, 0b11000000, 0b00011111, 0b11110011, 0b11110000,
0b00000111, 0b11001111, 0b11111100, 0b00000000, 0b11111111, 0b11100000, 0b00111111, 0b00000011, 0b11111111, 0b11000000, 0b00011111, 0b11111011, 0b11110000,
0b00000111, 0b11011111, 0b11111100, 0b00000000, 0b01111111, 0b11110000, 0b00111111, 0b00000011, 0b11111111, 0b10000000, 0b00001111, 0b11111111, 0b11110000,
0b00000111, 0b11111111, 0b11111000, 0b00000000, 0b00111111, 0b11111000, 0b00111111, 0b00001111, 0b11111111, 0b00000000, 0b00000111, 0b11111111, 0b11110000,
0b00000111, 0b11111111, 0b11110000, 0b00000000, 0b00111111, 0b11111110, 0b00111111, 0b00111111, 0b11111110, 0b00000000, 0b00000111, 0b11111111, 0b11110000,
0b00000111, 0b11111111, 0b11100000, 0b00000000, 0b00011111, 0b11111111, 0b11111111, 0b11111111, 0b11111100, 0b00000000, 0b00000011, 0b11111111, 0b11110000,
0b00000111, 0b11111111, 0b11100000, 0b00000000, 0b00001111, 0b11111111, 0b11111111, 0b11111111, 0b11111100, 0b00000000, 0b00000001, 0b11111111, 0b11110000,
0b00011111, 0b11111111, 0b11000000, 0b00000000, 0b00000111, 0b11111111, 0b11111111, 0b11111111, 0b11111000, 0b00000000, 0b00000000, 0b11111111, 0b11111100,
0b11111111, 0b11111111, 0b10000000, 0b00000000, 0b00000011, 0b11111111, 0b11111111, 0b11111111, 0b11100000, 0b00000000, 0b00000000, 0b01111111, 0b11111111,
0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000001, 0b11111111, 0b11111111, 0b11111111, 0b11000000, 0b00000000, 0b00000000, 0b00111111, 0b11111111,
0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b10000000, 0b00000000, 0b00000000, 0b00011111, 0b11111111,
0b11111111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, 0b00001111, 0b11111111,
0b11111111, 0b11110000, 0b00000000, 0b00000000, 0b00000000, 0b00001111, 0b11111111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, 0b00000111, 0b11111111,
0b11111111, 0b11000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b11111111, 0b11000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b11111111,
0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b01111111,
0b11111000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00001111,


};

struct State {
    uint8_t mem[sizeof(Bitmap)];
    Bitmap* myBitmap;
};

{{ GENERATED_CODE }}

void evaluate(Context ctx) {
    auto state = getState(ctx);
    state->myBitmap = new (state->mem) Bitmap(icon, 0, 104, 64);
    emitValue<output_BMP>(ctx, state->myBitmap);
}
